# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_core.ipynb (unless otherwise specified).

__all__ = ['get_home', 'get_root', 'HOME', 'dump_pickle', 'load_pickle', 'add_time_stamp', 'L_ROOT', 'D_ROOT',
           'DBS_REL', 'DBS', 'ZAPPOS_META_DIR', 'SCRAPED_META_DIR', 'IMG_SIZE_LG', 'IMG_SIZE_MD', 'IMG_SIZE_SM',
           'IMG_SIZE', 'IMG_SIZES', 'IMSZ2LAB', 'SIZE_ABBR', 'ZAPPOS_DF_SIMPLIFIED', 'ZAPPOS_FEATS_ALL',
           'ZAPPOS_FEATS_ALL_SORT', 'ZAPPOS_FEATS_SM', 'ZAPPOS_FEATS_MD', 'ZAPPOS_FEATS_LG', 'SCRAPED_DF',
           'COMBINED_SNEAKERS_DF', 'COMBINED_DF', 'QUERY_IM', 'QUERY_IM2', 'BETA', 'LATENT_DIM', 'mobilenet_v2_meta',
           'IM_STATS', 'DEFAULT_STATS', 'IMAGENET_OUT_RANGE', 'MY_OUT_RANGE', 'OUT_RANGE']

# Cell
from .imports import *

# Cell
def get_home():
    return Path().home()

# set a default
HOME = get_home()


def get_root():
    cwd = Path().cwd()
    cw


# Cell
# Data methods
def dump_pickle(filepath, item_to_save):
    "simple wrapper to load a pickelfile"
    with open(filepath, 'wb') as h:
        pickle.dump(item_to_save, h)


def load_pickle(filepath):
    "simple wrapper to load a pickelfile"
    with open(filepath, "rb") as h:
        item = pickle.load(h)
    return item


def add_time_stamp(filepath=""):
    "add PST timestamp to path"
    os.environ["TZ"] = "US/Pacific"
    time.tzset()
    return filepath + time.strftime("%m.%d-%H.%M")



# Cell


# DEFAULT PARAMS

#change these to relative....

L_ROOT = get_home()/'Projects/Project2.0/snkrfinder'
D_ROOT = get_home()/'Projects/DATABASE'



DBS_REL = {"zappos": "zappos/ut-zap50k-images",
      "sns": "scraped/sns",
      "goat": "scraped/goat"}

DBS = {"zappos": "ut-zap50k-images",
      "sns": "SnkrScrpr/data/sns/img",
      "goat": "SnkrScrpr/data/goat/img"}

ZAPPOS_META_DIR = D_ROOT/"ut-zap50k-data"
SCRAPED_META_DIR = D_ROOT/"SnkrScrpr/data/"

# Image sizes sm/med/large
IMG_SIZE_LG = 224
IMG_SIZE_MD = 160
IMG_SIZE_SM = 128
IMG_SIZE = IMG_SIZE_MD

IMG_SIZES = {"small":  IMG_SIZE_SM,
             "medium": IMG_SIZE_MD,
             "large":  IMG_SIZE_LG}

IMSZ2LAB = {IMG_SIZE_SM:"small",
            IMG_SIZE_MD:"medium",
            IMG_SIZE_LG:"large"}

SIZE_ABBR = {"small": "sm", "medium": "md", "large":"lg"}


# data files
ZAPPOS_DF_SIMPLIFIED = "zappos-50k-simplified_sort"

# additional df pickles of zappos data
ZAPPOS_FEATS_ALL = "zappos-50k-mobilenetv2-features_"
ZAPPOS_FEATS_ALL_SORT = "zappos-50k-mobilenetv2-features_sort_3"
ZAPPOS_FEATS_SM = f"mobilenetv2-features_small"
ZAPPOS_FEATS_MD = f"mobilenetv2-features_medium"
ZAPPOS_FEATS_LG = f"mobilenetv2-features_large"

SCRAPED_DF = "full_data"
COMBINED_SNEAKERS_DF = "full_sneakers_db"
COMBINED_DF = "full_db"


QUERY_IM = "Shoes/Sneakers and Athletic Shoes/Nike/7716996.288224.jpg"
QUERY_IM2 = 'figs/491212_01.jpg.jpeg'

# VAE PARAMETERS
# differential weighting for the beta VAE MSE/(#latents) vs beta_weight*KLD/(#pixels)
BETA = 2
LATENT_DIM = 128

# Cell
# copied the split and cut from denseness ... need to check if the splits and cut make sense
def _mobilenet_v2_split(m:torch.nn.Module):
    return L(m[0][0][:7],m[0][0][7:], m[1:]).map(params)

mobilenet_v2_meta   = {'cut':-1, 'split':_mobilenet_v2_split, 'stats':imagenet_stats}

model_meta[torchvision.models.mobilenet_v2] = {**mobilenet_v2_meta}

# Cell
IM_STATS = {'imagenet':imagenet_stats,'sneaker':([.5,.5,.5],[.5,.5,.5])}

DEFAULT_STATS = 'sneaker'

IMAGENET_OUT_RANGE = [-2.64,2.64]
MY_OUT_RANGE = [-1,1]

OUT_RANGE = MY_OUT_RANGE if DEFAULT_STATS == 'sneaker' else IMAGENET_OUT_RANGE
