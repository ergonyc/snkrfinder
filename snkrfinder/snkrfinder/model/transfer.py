# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/02b_model.transfer.ipynb (unless otherwise specified).

__all__ = ['transfer_mobilenet_v2', 'get_zappos_datablock', 'prep_df_for_datablocks', 'get_zappos_cat_dataloaders']

# Cell
from ..imports import *
from ..core import *
from ..data import *
from .core import *


# Cell
def transfer_mobilenet_v2(n_cat=4,freeze=True):
    model_conv = torchvision.models.mobilenet_v2(pretrained=True)
    # Parameters of newly constructed modules have requires_grad=True by default
    # just read this off: model_conv.classifier
    num_ftrs = model_conv.classifier._modules['1'].in_features
    model_conv.classifier._modules['1'] = nn.Linear(num_ftrs, n_cat)
    if freeze:
        for param in model_conv.parameters():
            param.requires_grad = False

    return model_conv

# Cell
def get_zappos_datablock(size=IMG_SIZE,rand_aug=True):
    batch_tfms = Normalize.from_stats(*imagenet_stats)
    if rand_aug:
        rand_tfms = aug_transforms(mult=1.0,
                   do_flip=True,
                   flip_vert=False,
                   max_rotate=3.0,
                   min_zoom=.95,
                   max_zoom=1.0,
                   max_lighting=0.1,
                   max_warp=0.023,
                   p_affine=0.66,
                   p_lighting=0.2,
                   xtra_tfms=None,
                   size=None,
                   mode='bilinear',
                   pad_mode='border',
                   align_corners=True,
                   batch=False,
                   min_scale=1.0)
        batch_tfms = rand_tfms+[batch_tfms]

    dblock = DataBlock(blocks=(ImageBlock, CategoryBlock),
                   splitter=ColSplitter('is_valid'),
                   get_x=zap_get_x,
                   get_y=zap_get_y,
                   item_tfms=Resize(size, method='pad', pad_mode='border'),
                   batch_tfms=batch_tfms)  # border pads white...
    return dblock

# Cell
def prep_df_for_datablocks(df):
    df = df[["Category","path","train","test","validate","t_t_v"]].copy()
    # I could remove all the "test" rows... for now i'll choose an alternate strategy:
    # Drop all the "test" rows for now, and create an "is_valid" column...
    # should probably drop a ton of columns to jus tkeep the file paths...
    # just keep what we'll need below
    df.loc[:,'is_valid'] = df.test | df.validate
    return df


def get_zappos_cat_dataloaders(data=None,batch_size=32, size=IMG_SIZE, device=None):
    # put everythign in train, and don't do any augmentation since we are just going
    # resize to 224
    # set up the helper functions to pass data into the
    if device is None:
        device = get_cuda()
    if data is None:
        filename = ZAPPOS_DF_SIMPLIFIED # "zappos-50k-simplified"
        data = pd.read_pickle(f"data/{filename}.pkl")

    data = prep_df_for_datablocks(data)

    dblock = get_zappos_datablock(size=size)

    dls = dblock.dataloaders(data,bs=batch_size,drop_last=True,device=device)
    return dls